name: testing
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  testing:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          pytest
  deploy:
    runs-on: ubuntu-latest
    needs: testing
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v5
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with: 
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.PROJECT_NAME }}-github-actions-role
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.PROJECT_NAME }}-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd todo
          docker build --target production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Prepare task definition template
        run: |
          sed -i "s/\${AWS_ACCOUNT_ID}/${{ secrets.AWS_ACCOUNT_ID }}/g" task-definition-template.json

      - name: Fill in the new image ID in the task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-template.json
          container-name: app
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            BUILD_ID=${{ github.sha }}
            DEPLOY_TIME=${{ github.event.head_commit.timestamp }}
            ENV = production
          secrets: "JWT_SECRET=${{ secrets.SECRET_MANAGER_JWT_ARN }}"
        
      - name: Deploy to Amazon ECS service
        id: deploy-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.PROJECT_NAME }}-service
          cluster: ${{ vars.PROJECT_NAME }}-ecs-cluster
          wait-for-service-stability: true

