name: testing
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  testing:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          pytest
  deploy:
    runs-on: ubuntu-latest
    needs: testing
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v5
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with: 
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.PROJECT_NAME }}-github-actions-role
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.PROJECT_NAME }}-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd todo
          docker build --target prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Updates ECS service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.PROJECT_NAME }}-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Step 1: Get the current task definition JSON from AWS
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition ${{ vars.PROJECT_NAME }}-task \
            --query taskDefinition)
          
          # Step 2: Use jq to modify the JSON - update the image URL to your new image
          # Also remove AWS-generated fields that can't be used when registering
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
            '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          
          # Step 3: Register this modified JSON as a NEW task definition revision
          NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEFINITION | aws ecs register-task-definition \
            --cli-input-json file:///dev/stdin \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          # Step 4: Tell the ECS service to use this new task definition
          # force-new-deployment ensures running tasks are replaced with new ones
          aws ecs update-service \
            --cluster ${{ vars.PROJECT_NAME }}-ecs-cluster \
            --service ${{ vars.PROJECT_NAME }}-service \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment
          
          echo "Deployed task definition: $NEW_TASK_DEF_ARN"
        

